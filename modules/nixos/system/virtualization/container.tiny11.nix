# Auto-generated using compose2nix v0.3.2-pre.
# https://github.com/winapps-org/winapps/blob/main/compose.yaml
{ pkgs, lib, ... }: {
  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."WinApps" = {
    image = "dockurr/windows";
    environment = {
      "CPU_CORES" = "4";
      "DISK_SIZE" = "64G";
      "HOME" = "/home/kanishkc";
      "RAM_SIZE" = "4G";
      "VERSION" = "core11";
    };
    volumes = [
      "/home/kanishkc:/shared:rw"
      "/home/kanishkc/oem:/oem:rw"
      "winapps_data:/storage:rw"
    ];
    ports = [ "8006:8006/tcp" "3389:3389/tcp" "3389:3389/udp" ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/kvm:/dev/kvm:rwm"
      "--network-alias=windows"
      "--network=winapps_default"
      "--privileged"
    ];
  };
  # systemd.services."podman-WinApps" = {
  #   serviceConfig = { Restart = lib.mkOverride 90 "on-failure"; };
  #   after = [
  #     "podman-network-winapps_default.service"
  #     "podman-volume-winapps_data.service"
  #   ];
  #   requires = [
  #     "podman-network-winapps_default.service"
  #     "podman-volume-winapps_data.service"
  #   ];
  #   partOf = [ "podman-compose-winapps-root.target" ];
  #   wantedBy = [ "podman-compose-winapps-root.target" ];
  # };

  # # Networks
  # systemd.services."podman-network-winapps_default" = {
  #   path = [ pkgs.podman ];
  #   serviceConfig = {
  #     Type = "oneshot";
  #     RemainAfterExit = true;
  #     ExecStop = "podman network rm -f winapps_default";
  #   };
  #   script = ''
  #     podman network inspect winapps_default || podman network create winapps_default
  #   '';
  #   partOf = [ "podman-compose-winapps-root.target" ];
  #   wantedBy = [ "podman-compose-winapps-root.target" ];
  # };

  # # Volumes
  # systemd.services."podman-volume-winapps_data" = {
  #   path = [ pkgs.podman ];
  #   serviceConfig = {
  #     Type = "oneshot";
  #     RemainAfterExit = true;
  #   };
  #   script = ''
  #     podman volume inspect winapps_data || podman volume create winapps_data
  #   '';
  #   partOf = [ "podman-compose-winapps-root.target" ];
  #   wantedBy = [ "podman-compose-winapps-root.target" ];
  # };

  # # Root service
  # # When started, this will automatically create all resources and start
  # # the containers. When stopped, this will teardown all resources.
  # systemd.targets."podman-compose-winapps-root" = {
  #   unitConfig = { Description = "Root target generated by compose2nix."; };
  #   wantedBy = [ "multi-user.target" ];
  # };
}
